name: Use cibuildwheel

on: 
    push:
    pull_request:
        branches: ["main"]

jobs:
  build-with-cibuildwheel:
    name: build using cibuildwheel
    runs-on: ${{ format('{0}-latest', matrix.os) }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu"]
        # os: ["ubuntu", "macos", "windows"]
        # arch: ["x86_64", "aarch64"]
        include:
            - os: "ubuntu"
              platform: "linux"
              arch: "x86_64"
            # - os: "macos"
            #   arch: "universal2"
            # - os: "windows"
            #   arch: "AMD64"
    env:
      mainJob: ${{ matrix.os == 'ubuntu' && matrix.arch == 'x86_64' }}

    steps:
      - uses: actions/checkout@v4
      - run: git clone https://github.com/WorksApplications/sudachi.rs.git
      - run: |
          cd sudachi.rs/
          bash fetch_dictionary.sh "20220519" "core"
      - run: |
          cp scripts/generate-manylinux-profile.sh sudachi.rs/python/
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install --upgrade setuptools setuptools-rust build cibuildwheel
      - name: Add aarch64/x86 target for Rust / macos
        if: ${{ matrix.os == 'macos' }}
        run: rustup target add aarch64-apple-darwin x86_64-apple-darwin
      - name: setup qemu
        if: ${{ matrix.os == 'ubuntu' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - uses: actions/cache@v4
        with:
            path: |
                ~/.cargo/bin/
                ~/.cargo/registry/index/
                ~/.cargo/registry/cache/
                ~/.cargo/git/db/
                target/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    #   - name: build sdist
    #     if: ${{ env.mainJob == 'true' }}
    #     working-directory: ./sudachi.rs/python
    #     run: bash build-sdist.sh

      - name: cibuildwheel ${{ matrix.platform || matrix.os }}
        working-directory: ./sudachi.rs/
        env:
            CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
            CIBW_BUILD: 'cp39-* cp313-*'
            CIBW_SKIP: '*-win32'
            CIBW_ARCHS: ${{ matrix.arch || 'auto' }}
            CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
            CIBW_MANYLINUX_AARCH64_IMAGE: 'manylinux2014'
            CIBW_ENVIRONMENT_LINUS: 'PATH="$HOME/.cargo/bin:$PATH" CARGO_TERM_COLOR="always" RUSTFLAGS="-C profile-use=/tmp/sudachi-profdata.merged -C opt-level=3" '
            CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
            CIBW_ENVIRONMENT_MACOS: 'PATH="$HOME/.cargo/bin:$PATH" CARGO_TERM_COLOR="always" MACOSX_DEPLOYMENT_TARGET=10.12'
            CIBW_BEFORE_ALL_LINUX: >
                curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y --no-modify-path --component llvm-tools &&
                export PATH="$HOME/.cargo/bin:$PATH" &&
                chmod +x python/generate-manylinux-profile.sh &&
                python/generate-manylinux-profile.sh
            CIBW_BEFORE_BUILD: >
                rustup show
            # CIBW_TEST_COMMAND: 'pytest {project}/test'
            # CIBW_TEST_REQUIRES: pytest requests
            # CIBW_TEST_SKIP: '*-macosx_arm64 *-macosx_universal2:arm64'
            CIBW_BUILD_VERBOSITY: 1
        run: cibuildwheel python/ --output-dir python/dist/
 
      - name: show
        run: ls ./sudachi.rs/python/dist/
